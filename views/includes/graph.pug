
div(class="vizOuter")
    div(id='viz', class="vizInner")
        script(type="text/javascript").

            var blocks = !{JSON.stringify(latestBlocks)}
            
            // Create the input graph
            var g = new dagreD3.graphlib.Graph()
                .setGraph({})
                .setDefaultEdgeLabel(function() { return {}; });
                g.graph().rankDir = 'RL';
                        
            for(var i=0;i<=blocks.length-3;i++) { 
                if(blocks[i].miner && blocks[i].miner.name){
                    g.setNode(i,  { labelType: "html", label: "<div class='vizNode''><a href=https://whatsonchain.com/block-height/"+ blocks[i].height +" target='_blank' >"+ "#" + blocks[i].height +"</a>" +'</br>'  + blocks[i].miner.name +"</div>"});
                }
                else if (blocks[i].miner){
                    g.setNode(i,  { labelType: "html", label: "<div class='vizNode'><a href=https://whatsonchain.com/block-height/"+ blocks[i].height +" target='_blank'>"+ "#" + blocks[i].height +"</a>" +'</br>'  + blocks[i].miner.substring(0, 5)+"..." +"</div>"});
                }
                else{             
                    g.setNode(i,  { labelType: "html", label: "<div class='vizNode'><a href=https://whatsonchain.com/block-height/"+ blocks[i].height +" target='_blank'>"+ "#" + blocks[i].height +"</a>" +'</br>' +  'Unknown'+"</div>" }); 
                }
            }

            g.setNode(999,  {label: '', shape:"img" }); //Alpha node

            g.nodes().forEach(function(v) {
            var node = g.node(v);
            // Round the corners of the nodes
            node.rx = node.ry = 5;
            if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
            //-  node.height = 30;
            //-  node.width = 30;
            } else {
                node.height = 30;
            }

            if(node.id === 999) {
                    node.shape = "img";
            }
            
            });
            


            for(var i=0 ;i<blocks.length-3;i++) {
                    g.setEdge(i+1, i); 
            }

            g.setEdge(0, 999); 
            
            // Create the renderer
            var render = new dagreD3.render();
            render.shapes().img = function circle(parent, bbox, node) {
                //var r = Math.max(bbox.width, bbox.height) / 2,
                var shapeSvg = parent.insert("image")
                    .attr("class", "nodeImage")
                    .attr("xlink:href", function(d) {
                        if (node) {
                            return '../img/logo/bsv.png';
                        }
                    }).attr("x", "-20px")
                    .attr("y", "-20px")
                    .attr("width", "40px")
                    .attr("height", "40px");

                node.intersect = function(point) {
                return dagreD3.intersect.circle(node, 20, point);
                };
            
                svg.selectAll("g.node").on("click", function(id) 
                { 
                    var _node = g.node(id);
                    if(id == 999) 
                    {
                        window.open("https://bitcoinsv.io",'_blank');
                    }
            });

            return shapeSvg;
            };

            // Set up an SVG group so that we can translate the final graph.
            var svg = d3.select("#viz")
                .append("svg")
                .attr('width', "100%")
                .attr('height', "50%"),
                svgGroup = svg.append("g");

            //- // Set up zoom support
            //- d3.select("svg").call(d3.zoom().on("zoom", function () {svg.attr("transform", d3.event.transform)})).append("g"),
            //-         width = +svg.attr("width"),
            //-         height = +svg.attr("height");


            // Run the renderer. This is what draws the final graph.
            render(d3.select("svg g"), g);

            // Center the graph
            var xCenterOffset = (g.graph().width);
            svgGroup.attr("transform", "translate(" + 30 + ", 20)");
            svg.attr("height", g.graph().height + 40);
            
    //- div(class="col" style="float: left;")
    //-         a(href="/blocks")
    //-             i(class="fas fa-cubes")
    //-             span  Browse Blocks &raquo;
    